apply plugin: "com.android.model.library"


model {
    android {
        compileSdkVersion = 25
        buildToolsVersion = '25.0.2'

        defaultConfig {
            minSdkVersion.apiLevel = 9
            targetSdkVersion.apiLevel = 9
            versionCode = 1
            versionName = '1.0'
        }
        ndk {
            platformVersion = 21
            moduleName = "cairo"
            //toolchain = 'clang'
            abiFilters.addAll(['armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64', 'mips', 'mips64']) //this is default
            ldLibs.addAll(['android', 'log', 'pixman'])
            stl = 'c++_static'
            cppFlags.add("-std=c++11")
            cppFlags.add("-fexceptions")
            cppFlags.add("-frtti")
            CFlags.addAll("-DCAIRO_NO_MUTEX=1", "-DHAVE_STDINT_H", "-DHAVE_UINT64_T")
            CFlags.add("-I" + projectDir.getAbsolutePath() + "/../../COPKG/cairo")
            CFlags.add("-I" + projectDir.getAbsolutePath() + "/build/ndkLibs/include/pixman")
            CFlags.add("-I" + projectDir.getAbsolutePath() + "/build/ndkLibs/include")
            cppFlags.add("-I" + projectDir.getAbsolutePath() + "/build/ndkLibs/include")
        }
        abis {
            create("armeabi") {
                ldFlags.add("-L" + projectDir.getAbsolutePath() + "/build/ndkLibs/armeabi")
            }
            create("armeabi-v7a") {
                ldFlags.add("-L" + projectDir.getAbsolutePath() + "/build/ndkLibs/armeabi-v7a")
            }
            create("arm64-v8a") {
                ldFlags.add("-L" + projectDir.getAbsolutePath() + "/build/ndkLibs/arm64-v8a")
            }
            create("x86") {
                ldFlags.add("-L" + projectDir.getAbsolutePath() + "/build/ndkLibs/x86")
            }
            create("x86_64") {
                ldFlags.add("-L" + projectDir.getAbsolutePath() + "/build/ndkLibs/x86_64")
            }
            create("mips") {
                ldFlags.add("-L" + projectDir.getAbsolutePath() + "/build/ndkLibs/mips")
            }
            create("mips64") {
                ldFlags.add("-L" + projectDir.getAbsolutePath() + "/build/ndkLibs/mips64")
            }
        }
    }

    android.lintOptions {
        abortOnError false
    }

    android.sources {
        main {
            jni {
                exportedHeaders {
                    srcDir "../../src/"
                }
                source {
                    srcDir '../../src'
                    exclude "**/cairo-cff-subset.c"
                    exclude "**/cairo-cogl-*.c"
                    exclude "**/cairo-deflate-system.c"
                    exclude "**/cairo-directfb-*.c"
                    exclude "**/cairo-egl-*.c"
                    exclude "**/cairo-ft-font.c"
                    exclude "**/cairo-gl-*.c"
                    exclude "**/cairo-glx-*.c"
                    exclude "**/cairo-os2-*.c"
                    exclude "**/cairo-beos-*.cpp"
                    exclude "**/cairo-pdf-*.c"
                    exclude "**/cairo-png.c"
                    exclude "**/cairo-ps-*.c"
                    exclude "**/cairo-quartz-*.c"
                    exclude "**/cairo-qt-*.cpp"
                    exclude "**/cairo-script-*.c"
                    exclude "**/cairo-svg-*.c"
                    exclude "**/cairo-tee-*.c"
                    exclude "**/cairo-wgl-*.c"
                    exclude "**/cairo-vg-*.c"
                    exclude "**/cairo-xcb-*.c"
                    exclude "**/cairo-xlib-*.c"
                    exclude "**/cairo-xml-*.c"
                    exclude "**/test-*.c"
                    exclude "**/cairo-image-mask-compositor.c"
                    exclude "**/check-has-hidden-symbols.c"
                    exclude "**/check-link.c"
                    exclude "**/cairo-drm.c"
                    exclude "**/cairo-drm-*.c"
                    exclude "**/cairo-win32-*.c"
                    exclude "**/cairo-skia-*.cpp"

//Files list should be:
//                    cairo-analysis-surface.c,
//                    cairo-arc.c,
//                    cairo-array.c,
//                    cairo-atomic.c,
//                    cairo-base64-stream.c,
//                    cairo-base85-stream.c,
//                    cairo-bentley-ottmann.c,
//                    cairo-bentley-ottmann-rectangular.c,
//                    cairo-bentley-ottmann-rectilinear.c,
//                    cairo-botor-scan-converter.c,
//                    cairo-boxes.c,
//                    cairo-boxes-intersect.c,
//                    cairo.c,
//                    cairo-cache.c,
//                    cairo-clip.c,
//                    cairo-clip-boxes.c,
//                    cairo-clip-polygon.c,
//                    cairo-clip-region.c,
//                    cairo-clip-surface.c,
//                    cairo-clip-tor-scan-converter.c,
//                    cairo-color.c,
//                    cairo-composite-rectangles.c,
//                    cairo-compositor.c,
//                    cairo-contour.c,
//                    cairo-damage.c,
//                    cairo-debug.c,
//                    cairo-default-context.c,
//                    cairo-device.c,
//                    cairo-error.c,
//                    cairo-fallback-compositor.c,
//                    cairo-fixed.c,
//                    cairo-font-face.c,
//                    cairo-font-face-twin.c,
//                    cairo-font-face-twin-data.c,
//                    cairo-font-options.c,
//                    cairo-freelist.c,
//                    cairo-freed-pool.c,
//                    cairo-gstate.c,
//                    cairo-hash.c,
//                    cairo-hull.c,
//                    cairo-image-compositor.c,
//                    cairo-image-info.c,
//                    cairo-image-source.c,
//                    cairo-image-surface.c,
//                    cairo-line.c,
//                    cairo-lzw.c,
//                    cairo-matrix.c,
//                    cairo-mask-compositor.c,
//                    cairo-mesh-pattern-rasterizer.c,
//                    cairo-mempool.c,
//                    cairo-misc.c,
//                    cairo-mono-scan-converter.c,
//                    cairo-mutex.c,
//                    cairo-no-compositor.c,
//                    cairo-observer.c,
//                    cairo-output-stream.c,
//                    cairo-paginated-surface.c,
//                    cairo-path-bounds.c,
//                    cairo-path.c,
//                    cairo-path-fill.c,
//                    cairo-path-fixed.c,
//                    cairo-path-in-fill.c,
//                    cairo-path-stroke.c,
//                    cairo-path-stroke-boxes.c,
//                    cairo-path-stroke-polygon.c,
//                    cairo-path-stroke-traps.c,
//                    cairo-path-stroke-tristrip.c,
//                    cairo-pattern.c,
//                    cairo-pen.c,
//                    cairo-polygon.c,
//                    cairo-polygon-intersect.c,
//                    cairo-polygon-reduce.c,
//                    cairo-raster-source-pattern.c,
//                    cairo-recording-surface.c,
//                    cairo-rectangle.c,
//                    cairo-rectangular-scan-converter.c,
//                    cairo-region.c,
//                    cairo-rtree.c,
//                    cairo-scaled-font.c,
//                    cairo-shape-mask-compositor.c,
//                    cairo-slope.c,
//                    cairo-spans.c,
//                    cairo-spans-compositor.c,
//                    cairo-spline.c,
//                    cairo-stroke-dash.c,
//                    cairo-stroke-style.c,
//                    cairo-surface.c,
//                    cairo-surface-clipper.c,
//                    cairo-surface-fallback.c,
//                    cairo-surface-observer.c,
//                    cairo-surface-offset.c,
//                    cairo-surface-snapshot.c,
//                    cairo-surface-subsurface.c,
//                    cairo-surface-wrapper.c,
//                    cairo-tag-attributes.c,
//                    cairo-tag-stack.c,
//                    cairo-time.c,
//                    cairo-tor-scan-converter.c,
//                    cairo-tor22-scan-converter.c,
//                    cairo-toy-font-face.c,
//                    cairo-traps.c,
//                    cairo-traps-compositor.c,
//                    cairo-tristrip.c,
//                    cairo-unicode.c,
//                    cairo-user-font.c,
//                    cairo-version.c,
//                    cairo-wideint.c
                }
            }
        }
    }
}

repositories {
    maven {
        url 'https://dl.bintray.com/igagis/android/'
    }
}
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'org.pixman:pixman:+'
}


//===================================
//=== Extract NDK files from AARs ===

task extractNDKLibs {
    doLast {
        configurations.compile.each {
            def file = it.absoluteFile
            copy {
                from zipTree(file)
                into "build/"
                include "ndkLibs/**/*"
            }
        }
    }
}
build.dependsOn('extractNDKLibs')
tasks.whenTaskAdded { task ->
    if (task.name.startsWith('compile')) {
        task.dependsOn('extractNDKLibs')
    }
}



//=================================
//=== pack library files to aar ===


def aarName = name

task copyNdkLibsToAAR(type: Zip) {
    baseName = aarName
    version = "\$(version)"
    extension = 'aar.in'
    destinationDir = file('..') //put resulting AAR file to upper level directory

    from zipTree("build/outputs/aar/" + aarName + "-release.aar")
    exclude('**/*.so') //do not include shared libraries into final AAR
    from("../../COPKG") {
        include('**/*.h')
//        exclude('makefile')
//        exclude('soname.txt')
//        exclude('**/*.cpp')
//        exclude('**/*.c')
        into('ndkLibs/include/')
    }
    from("../../src") {
        include('**/*.h')
//        exclude('makefile')
//        exclude('soname.txt')
//        exclude('**/*.cpp')
//        exclude('**/*.c')
        into('ndkLibs/include/cairo')
    }
    from("build/intermediates/binaries/debug/lib"){
        include('**/*.a')
        into('ndkLibs')
    }
}

build.finalizedBy('copyNdkLibsToAAR')