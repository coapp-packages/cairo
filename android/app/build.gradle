apply plugin: 'com.android.model.application'


model {

    repositories {
        libs(PrebuiltLibraries) {
        }
    }

    android {
        compileSdkVersion = 25
        buildToolsVersion = '25.0.2'

        defaultConfig{
            applicationId = "org.cairographics.cairotests"
            minSdkVersion.apiLevel = 9
            targetSdkVersion.apiLevel = 9
            versionCode = 1
            versionName = '1.0'
        }

        ndk {
            platformVersion = 21
            moduleName = 'cairo-tests'
            toolchain = 'clang'
            stl = 'c++_shared'
            cppFlags.add("-std=c++11")
            cppFlags.add("-fexceptions")
            cppFlags.add("-frtti")
            cppFlags.add("-I" + projectDir.getAbsolutePath() + "/build/ndkLibs/include")
            CFlags.addAll("-DCAIRO_NO_MUTEX=1", "-DHAVE_STDINT_H", "-DHAVE_UINT64_T")
            CFlags.add("-I" + projectDir.getAbsolutePath() + "/../../boilerplate")
            CFlags.add("-I" + projectDir.getAbsolutePath() + "/../../util/cairo-script")
            CFlags.add("-I" + projectDir.getAbsolutePath() + "/../../util/cairo-missing")
            CFlags.add("-I" + projectDir.getAbsolutePath() + "/../../test/pdiff")
            CFlags.add("-I" + projectDir.getAbsolutePath() + "/../../COPKG/cairo")
            CFlags.add("-I" + projectDir.getAbsolutePath() + "/build/ndkLibs/include/pixman")
            CFlags.add("-I" + projectDir.getAbsolutePath() + "/build/ndkLibs/include")
            ldLibs.addAll(['android', 'log'])
            // build a default combined apk including all ABIs.
            // abiFilters.addAll(['x86'])
        }

        sources {
            main {
                jni {
                    dependencies {
                        project ":cairo" linkage "static"
                    }
                    source {
//                        srcDirs '../../test'
//                        exclude '**/main.cpp'
//                        exclude '**/bitmap-font.c'
//                        exclude '**/egl-*.c'
//                        exclude '**/fallback-resolution.c'
//                        exclude '**/ft-*.c'
//                        exclude '**/gl-*.c'
//                        exclude '**/get-xrender-format.c'
//                        exclude '**/pdf-*.c'
//                        exclude '**/ps-*.c'
//                        exclude '**/ps2png.c'
//                        exclude '**/cairo-test.c'
//                        exclude '**/pdf2png.c'
//                        exclude '**/quartz-*.c'
//                        exclude '**/svg-*.c'
//                        exclude '**/svg2png.c'
//                        exclude '**/xlib-*.c'
//                        exclude '**/pdiff/*'
                    }
                }
                jniLibs {
                    source {
                    }
                }
            }
        }
        buildTypes {
            release {
                minifyEnabled false
                proguardFiles.add(file('proguard-rules.pro'))
            }
        }
    }

    android.lintOptions {
        abortOnError false
    }
}

repositories {
    maven {
        url 'https://dl.bintray.com/igagis/android/'
    }
}
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'org.pixman:pixman:+'
}



task extractNDKLibs {
    doLast {
        configurations.compile.each {
            def file = it.absoluteFile
            copy {
                from zipTree(file)
                into "build/"
                include "ndkLibs/**/*"
            }
        }
    }
}
build.dependsOn('extractNDKLibs')
tasks.whenTaskAdded { task ->
    if (task.name.startsWith('compile')) {
        task.dependsOn('extractNDKLibs')
    }
}